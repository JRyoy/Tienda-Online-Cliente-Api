// <auto-generated />
using System;
using Api.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Persistencia.Migraciones
{
    [DbContext(typeof(AplicacionDbContext))]
    [Migration("20231105220815_UnNuevoCambio")]
    partial class UnNuevoCambio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Varios.Carrito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("Varios.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("2d32e430-a901-4aee-a941-45d9d5f35628"),
                            Descripcion = "Productos electrónicos y gadgets",
                            Nombre = "Electrónica"
                        },
                        new
                        {
                            IdCategoria = new Guid("1adb2967-c87d-41db-8269-1bc240a870fc"),
                            Descripcion = "Ropa de moda para todas las edades",
                            Nombre = "Ropa"
                        },
                        new
                        {
                            IdCategoria = new Guid("2e26d56a-f4fa-4370-abfa-03e45662d90a"),
                            Descripcion = "Productos alimenticios y comestibles",
                            Nombre = "Alimentos"
                        },
                        new
                        {
                            IdCategoria = new Guid("2fff1b06-14ee-4db5-890f-6ce69bab9811"),
                            Descripcion = "Artículos para el hogar y decoración",
                            Nombre = "Hogar"
                        },
                        new
                        {
                            IdCategoria = new Guid("0377c43c-5ee4-4bfc-b6b7-4a66cd7e0fa1"),
                            Descripcion = "Equipos y accesorios deportivos",
                            Nombre = "Deportes"
                        });
                });

            modelBuilder.Entity("Varios.ItemCarrito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Subtotal")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("ItemCarritos");
                });

            modelBuilder.Entity("Varios.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid?>("VendedorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("categoriaIdCategoria")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("VendedorId");

                    b.HasIndex("categoriaIdCategoria");

                    b.ToTable("Producto");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbc5c2eb-2ae9-4023-9311-60def60cdb98"),
                            Descripcion = "",
                            Nombre = "Smartphone",
                            Precio = 120.0,
                            Stock = 5
                        },
                        new
                        {
                            Id = new Guid("040213b5-457e-46ce-8ef9-84cf94f3cb55"),
                            Descripcion = "",
                            Nombre = "Laptop",
                            Precio = 150.0,
                            Stock = 5
                        },
                        new
                        {
                            Id = new Guid("3e9c240c-f38e-4f0e-b9be-b5605510bde5"),
                            Descripcion = "",
                            Nombre = "Televisor",
                            Precio = 200.0,
                            Stock = 5
                        },
                        new
                        {
                            Id = new Guid("54c81ac8-9a8d-41ac-8bc3-0947ab2f557a"),
                            Descripcion = "",
                            Nombre = "Manzanas",
                            Precio = 2.4900000000000002,
                            Stock = 150
                        },
                        new
                        {
                            Id = new Guid("1a633e85-d197-434f-a734-27c9fb23222b"),
                            Descripcion = "",
                            Nombre = "Pan integral",
                            Precio = 3.9900000000000002,
                            Stock = 200
                        });
                });

            modelBuilder.Entity("Varios.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Apodo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Vendedor");

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("64017c7b-2317-443a-a369-6ee3a435240e"),
                            Apellido = "Gremory",
                            Apodo = "delfin",
                            Email = "kk@gmail.com",
                            Nombre = "Rias",
                            Password = "dsfsdfv"
                        },
                        new
                        {
                            Id = new Guid("7c3e4e4c-be0b-4053-b80c-8bc688070dff"),
                            Apellido = "hyodo",
                            Apodo = "delfin",
                            Email = "ññ@gmail.com",
                            Nombre = "Issei",
                            Password = "30851"
                        });
                });

            modelBuilder.Entity("Varios.Cliente", b =>
                {
                    b.HasBaseType("Varios.Vendedor");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80bfc8b7-27f9-42aa-b6dc-022e860db641"),
                            Apellido = "Perez",
                            Apodo = "juanito123",
                            Email = "juanperez@example.com",
                            Nombre = "Juan",
                            Password = "password123"
                        },
                        new
                        {
                            Id = new Guid("1da1542c-301e-4508-bfbf-80fc87e643fc"),
                            Apellido = "Gomez",
                            Apodo = "anita456",
                            Email = "anagomez@example.com",
                            Nombre = "Ana",
                            Password = "clave456"
                        },
                        new
                        {
                            Id = new Guid("28b06b4e-67b1-4c6d-9094-88f6791d3483"),
                            Apellido = "Rodriguez",
                            Apodo = "lucho789",
                            Email = "luisr@example.com",
                            Nombre = "Luis",
                            Password = "pass789"
                        },
                        new
                        {
                            Id = new Guid("106788c9-c363-4f50-b42c-c4ee984fb821"),
                            Apellido = "Martínez",
                            Apodo = "mari123",
                            Email = "mariam@example.com",
                            Nombre = "María",
                            Password = "contraseña123"
                        },
                        new
                        {
                            Id = new Guid("ceb8e92d-0f3a-4a1f-8e04-0194721e36ed"),
                            Apellido = "López",
                            Apodo = "carlitos1",
                            Email = "carlosl@example.com",
                            Nombre = "Carlos",
                            Password = "clave1234"
                        });
                });

            modelBuilder.Entity("Varios.Carrito", b =>
                {
                    b.HasOne("Varios.Cliente", "Cliente")
                        .WithMany("Carritos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Varios.ItemCarrito", b =>
                {
                    b.HasOne("Varios.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Varios.Producto", b =>
                {
                    b.HasOne("Varios.Vendedor", null)
                        .WithMany("Productos")
                        .HasForeignKey("VendedorId");

                    b.HasOne("Varios.Categoria", "categoria")
                        .WithMany()
                        .HasForeignKey("categoriaIdCategoria");

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("Varios.Cliente", b =>
                {
                    b.HasOne("Varios.Vendedor", null)
                        .WithOne()
                        .HasForeignKey("Varios.Cliente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Varios.Vendedor", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Varios.Cliente", b =>
                {
                    b.Navigation("Carritos");
                });
#pragma warning restore 612, 618
        }
    }
}
